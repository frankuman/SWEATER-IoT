import time
from machine import I2C, Pin
from I2C_LCD import I2CLcd
import sh1106


i2c = I2C(1, scl=Pin(11), sda=Pin(10), freq=200000)
devices = i2c.scan()
try:
    if devices != []:
        lcd = I2CLcd(i2c, devices[0], 4, 20)
        lcd.backlight_on()
        time.sleep(1)
        lcd.clear()
        print("LCD initialized and backlight on.")
    else:
        print("No I2C address found")
except Exception as e:
    print("LCD initialization failed:", e)
i2c2 = I2C(0, scl=Pin(21), sda=Pin(20), freq=200000)
devices2 = i2c2.scan()
print("I2C devices found:", devices2)

WIDTH =128 
HEIGHT= 64
display = sh1106.SH1106_I2C(WIDTH, HEIGHT, i2c2)
display.init_display()
display.poweron()
display.fill(0)  
display.text("SWEATER", 32, 32)
display.show()
time.sleep(5)


# big nice numbers lol

digit_0 = [
    0b0011111111000000,
    0b0111111111100000,
    0b1111000011110000,
    0b1111000011110000,
    0b1111001111110000,
    0b1111011111110000,
    0b1111111111110000,
    0b1111111111110000,
    0b1111111011110000,
    0b1111110011110000,
    0b1111000011110000,
    0b1111000011110000,
    0b0111111111100000,
    0b0011111111000000,
    0b0000000000000000,
    0b0000000000000000,
]
digit_1 = [
    0b0000111100000000,
    0b0000111100000000,
    0b1111111100000000,
    0b1111111100000000,
    0b0000111100000000,
    0b0000111100000000,
    0b0000111100000000,
    0b0000111100000000,
    0b0000111100000000,
    0b0000111100000000,
    0b0000111100000000,
    0b0000111100000000,
    0b1111111111110000,
    0b1111111111110000,
    0b0000000000000000,
    0b0000000000000000,
]
digit_2 = [
    0b0011111111000000,
    0b0111111111100000,
    0b1111000011110000,
    0b1111000011110000,
    0b0000000011110000,
    0b0000000111110000,
    0b0000011111100000,
    0b0001111111000000,
    0b0011111000000000,
    0b0111110000000000,
    0b1111100011110000,
    0b1111000011110000,
    0b1111111111110000,
    0b1111111111110000,
    0b0000000000000000,
    0b0000000000000000,
]
digit_3 = [
    0b0011111111000000,
    0b0111111111100000,
    0b1111000011110000,
    0b1111000011110000,
    0b0000000011110000,
    0b0000000011110000,
    0b0000111111000000,
    0b0000111111000000,
    0b0000000011110000,
    0b0000000011110000,
    0b1111000011110000,
    0b1111000011110000,
    0b0111111111100000,
    0b0011111111000000,
    0b0000000000000000,
    0b0000000000000000,
]
digit_4 = [
    0b0000001111110000,
    0b0000011111110000,
    0b0000111111110000,
    0b0001111111110000,
    0b0011111011110000,
    0b0111110011110000,
    0b1111100011110000,
    0b1111000011110000,
    0b1111111111111100,
    0b1111111111111100,
    0b0000000011110000,
    0b0000000011110000,
    0b0000000011110000,
    0b0000000011110000,
    0b0000000000000000,
    0b0000000000000000,
]
digit_5 = [
    0b1111111111110000,
    0b1111111111110000,
    0b1111000000000000,
    0b1111000000000000,
    0b1111111111000000,
    0b1111111111100000,
    0b0000000011110000,
    0b0000000011110000,
    0b0000000011110000,
    0b0000000011110000,
    0b1111000011110000,
    0b1111000011110000,
    0b0111111111100000,
    0b0011111111000000,
    0b0000000000000000,
    0b0000000000000000,
]
digit_6 = [
    0b0000111111000000,
    0b0001111111000000,
    0b0011111000000000,
    0b0111110000000000,
    0b1111100000000000,
    0b1111000000000000,
    0b1111111111000000,
    0b1111111111100000,
    0b1111000011110000,
    0b1111000011110000,
    0b1111000011110000,
    0b1111000011110000,
    0b0111111111100000,
    0b0011111111000000,
    0b0000000000000000,
    0b0000000000000000,
]
digit_7 = [
    0b1111111111110000,
    0b1111111111110000,
    0b1111000011110000,
    0b1111000011110000,
    0b0000000011110000,
    0b0000000111110000,
    0b0000001111100000,
    0b0000011111000000,
    0b0000111110000000,
    0b0001111100000000,
    0b0011111000000000,
    0b0011110000000000,
    0b0011110000000000,
    0b0011110000000000,
    0b0000000000000000,
    0b0000000000000000,
]
digit_8 = [
    0b0011111111000000,
    0b0111111111100000,
    0b1111000011110000,
    0b1111000011110000,
    0b1111000011110000,
    0b1111000011110000,
    0b0011111111000000,
    0b0011111111000000,
    0b1111000011110000,
    0b1111000011110000,
    0b1111000011110000,
    0b1111000011110000,
    0b0111111111100000,
    0b0011111111000000,
    0b0000000000000000,
    0b0000000000000000,
]
digit_9 = [
    0b0011111111000000,
    0b0111111111100000,
    0b1111000011110000,
    0b1111000011110000,
    0b1111000011110000,
    0b1111000011110000,
    0b0111111111110000,
    0b0011111111110000,
    0b0000000011110000,
    0b0000000111110000,
    0b0000001111100000,
    0b0000011111000000,
    0b0011111110000000,
    0b0011111100000000,
    0b0000000000000000,
    0b0000000000000000,
]
colon = [
    0b0000000000000000,
    0b0000000000000000,
    0b0000000000000000,
    0b0000000000000000,
    0b0000001111000000,
    0b0000001111000000,
    0b0000001111000000,
    0b0000001111000000,
    0b0000000000000000,
    0b0000000000000000,
    0b0000001111000000,
    0b0000001111000000,
    0b0000001111000000,
    0b0000001111000000,
    0b0000000000000000,
    0b0000000000000000,
]



digits = [digit_0, digit_1, digit_2, digit_3, digit_4, digit_5, digit_6, digit_7, digit_8, digit_9]

sweater_bitmap = [
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000111110000000000001111100000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000111111111000000000011111111100000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000111111111111100000000111111111111100000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000011111111111111111111111111111111111111100000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000011111111111111111111111111111111111111111111000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000111111111111111111111111111111111111111111111100000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000001111111111111111111111111111111111111111111111110000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000011111111111111111111111111111111111111111111111111000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000011111111111111111111111111111111111111111111111111100000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000011111111111111111111111111111111111111111111111111100000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000,
    0b00000000000000000000000000000000000001111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000,
    0b00000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000,
    0b00000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000,
    0b00000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000,
    0b00000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000,
    0b00000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000,
    0b00000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000,
    0b00000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000,
    0b00000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000,
    0b00000000000000000000000000000000001111111111100111111111111111111111111111111111101111111111110000000000000000000000000000000000,
    0b00000000000000000000000000000000001111111111101111111111111111111111111111111111100111111111110000000000000000000000000000000000,
    0b00000000000000000000000000000000001111111111101111111111111111111111111111111111100111111111111000000000000000000000000000000000,
    0b00000000000000000000000000000000001111111111101111111111111111111111111111111111110111111111111000000000000000000000000000000000,
    0b00000000000000000000000000000000011111111111001111111111111111111111111111111111110111111111111000000000000000000000000000000000,
    0b00000000000000000000000000000000011111111111001111111111111111111111111111111111110011111111111000000000000000000000000000000000,
    0b00000000000000000000000000000000011111111111001111111111111111111111111111111111110011111111111100000000000000000000000000000000,
    0b00000000000000000000000000000000111111111110001111111111111111111111111111111111110011111111111100000000000000000000000000000000,
    0b00000000000000000000000000000000111111111110001111111111111111111111111111111111110001111111111100000000000000000000000000000000,
    0b00000000000000000000000000000000111111111110001111111111111111111111111111111111110001111111111110000000000000000000000000000000,
    0b00000000000000000000000000000001111111111100001111111111111111111111111111111111110001111111111110000000000000000000000000000000,
    0b00000000000000000000000000000000111111111100001111111111111111111111111111111111110000111111111100000000000000000000000000000000,
    0b00000000000000000000000000000001111111111000000111111111111111111111111111111111100000011111111100000000000000000000000000000000,
    0b00000000000000000000000000000001111111111000000111111111111111111111111111111111100000001111111110000000000000000000000000000000,
    0b00000000000000000000000000000001111111110000000011111111111111111111111111111111000000001111111100000000000000000000000000000000,
    0b00000000000000000000000000000000001111110000000001111111111111111111111111111110000000001100000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000001111111111111111111111111111110000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000001111111111111111111111111111110000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000111111111111111111111111111100000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
]

def split_message(msg, max_length=20):
    lines = []
    while len(msg) > max_length:
        lines.append(msg[:max_length])
        msg = msg[max_length:]
    lines.append(msg)
    
    while len(lines) < 4:
        lines.append(" ")
    return lines

def display_custom_message(custom_msg):
    lcd.clear()
    
    
    

    lcd.move_to(0, 0)
    lcd.putstr(str(custom_msg))
    # lcd.move_to(0, 1)
    # lcd.putstr(str(lines[1]))
    # lcd.move_to(0, 2)
    # lcd.putstr(str(lines[2]))
    # lcd.move_to(0, 3)
    # lcd.putstr(str(lines[3]))
    time.sleep(10)
    

def display_message(date_str,outside_temp_str, time_str, temp_str):
    lcd.clear()
    lcd.move_to(0, 0)
    lcd.putstr(date_str)
    lcd.move_to(0, 1)
    lcd.putstr(time_str)
    lcd.move_to(0, 2)
    lcd.putstr(outside_temp_str)
    lcd.move_to(0, 3)
    lcd.putstr(temp_str)

def draw_large_digit(digit, x, y):
    for row_index, row in enumerate(digit):
        for col_index in range(16):
            if row & (1 << (15 - col_index)):
                display.pixel(x + col_index, y + row_index, 1)

def display_alarm(alarmtime):
    display.poweron()
    display.fill(0)
    alarmtime = str(alarmtime)
    x_offset = 16
    for char in alarmtime:
        if char.isdigit():
            draw_large_digit(digits[int(char)], x_offset, 20)
            x_offset += 20 
        elif char == ':':
            draw_large_digit(colon, x_offset, 20)
            x_offset += 20

    display.text("  Alarm Time", 0, 0)
    display.show()
def display_prediction(prediction):
    prediction_list = [
        "1 - Tshirt and shorts",
        "2 - Tshirt and pants",
        "3 - Longshirt and pants",
        "4 - Hoodie and pants",
        "5 - Light jacket and pants",
        "6 - Light jacket and hoodie and pants OR raining clothes",
        "7 - Heavy jacket and pants",
        "8 - Heavy jacket and hoodie and pants",
        "9 - Snowstorm, don't go outside"
    ]
    
    try:
        prediction_index = int(prediction) - 1
        if 0 <= prediction_index < len(prediction_list):
            prediction_text = prediction_list[prediction_index]
        else:
            prediction_text = "Invalid prediction"
    except ValueError:
        prediction_text = "Invalid prediction"
    display.poweron()
    display.fill(0)
    
   
    lines = []
    while len(prediction_text) > 16:
        space_index = prediction_text.rfind(' ', 0, 16)
        if space_index == -1:
            space_index = 16
        lines.append(prediction_text[:space_index])
        prediction_text = prediction_text[space_index:].strip()
    lines.append(prediction_text)
    
    
    y = 0
    for line in lines:
        display.text(line, 0, y)
        y += 10 
    
    display.show()
    
def display_on_oled(message):
    if message == "showall":
        display_prediction("1")
        time.sleep(2)
        display_prediction("2")
        time.sleep(2)
        display_prediction("3")
        time.sleep(2)
        display_prediction("4")
        time.sleep(2)
        display_prediction("5")
        time.sleep(2)
        display_prediction("6")
        time.sleep(2)
        display_prediction("7")
        time.sleep(2)
        display_prediction("8")
        time.sleep(2)
        display_prediction("9")
        display.poweron()
        display.fill(0)
        
      
        display.text(message, 0, 0)
            
        
        display.show()
def draw_bitmap(bitmap, width, height, x_offset=0, y_offset=0):
    for y in range(height):
        for x in range(width):
            if bitmap[y] & (1 << (width - 1 - x)):
                display.pixel(x + x_offset, y + y_offset, 1)
            else:
                display.pixel(x + x_offset, y + y_offset, 0)
    display.show()


draw_bitmap(sweater_bitmap, 128, 64)
